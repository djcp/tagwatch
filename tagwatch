#!/bin/bash

EXCLUDE_REGEX_DEFAULT="tags.*|log/|tmp/|\.git/|coverage/|doc/|public/"
SCRIPTNAME=`basename $0`
CTAGS_DEFAULT_OPTIONS="-R --exclude=*.js --langmap=ruby:+.rake.builder.rjs --languages=-javascript"

help() {
  cat <<Yubnub

ABOUT:

  $SCRIPTNAME - Auto updates ctags files via filesystem events.

$SCRIPTNAME watches a directory recursively for file changes and automatically
updates your exuberant-ctags "tags" file.

It subscribes to filesystem events via inotifywait on linux, and fsw on OS X,
and should impose very little overhead. It is aware of file changes spawned by
anything - your editor, your source control system, etc. It will not update
more than once a second.

It requires exuberant-ctags and inotifywait. Install "exuberant-ctags" and
"inotify-tools" on modern debian-derived systems.

OPTIONS:

  -h: this message
  -v: verbose - additional log output. "." are ignored events because they
      occurred too quickly after the last update.
  -d: the directory to watch (the "tags" file is written here too).
      Defaults to pwd
  -e: An extended POSIX regex that defines what files / directories to ignore.
      Defaults to: "$EXCLUDE_REGEX_DEFAULT"
  -c: Options passed to the exuberant-ctags command, the defaults are fairly
      rails specific.
      Defaults to: "$CTAGS_DEFAULT_OPTIONS"

RC Configuration:

Files in the watched_directory named ".tagwatch.rc" are sourced and allow you
to configure default options. Currently, you can configured -e (the regex that
defines which updated files / paths to ignore) and -c (the default ctags
options).

  # ./.tagwatch.rc
  EXCLUDE_REGEX="tags.*|log/|tmp/|\.git/|coverage/|doc"
  CTAGS_DEFAULT_OPTIONS="-R --exclude='*.js' --langmap='ruby:+.rake.builder.rjs' --languages=-javascript"

USAGE:

  $SCRIPTNAME -v -e "foo|bar"

Yubnub

  exit;
}

log_if_verbose() {
  if [ "$VERBOSE" -eq 1 ]; then
    echo -ne $1
  fi
}

source_rc_optionally() {
  RC_FILE="$1/.tagwatch.rc"
  if [ -e $RC_FILE ]; then
    log_if_verbose "Using RC: $RC_FILE\n"
    . $RC_FILE
  fi
}

while getopts "hvd:e:c:" opt; do
  case $opt in
    h) help ;;
    v) VERBOSE=1 ;;
    d) WATCHED_DIR=$OPTARG ;;
    e) EXCLUDE_REGEX=$OPTARG ;;
    c) CTAGS_OPTIONS=$OPTARG ;;
  esac
done

WATCHED_DIR=${WATCHED_DIR:-`pwd`}
source_rc_optionally $WATCHED_DIR

VERBOSE=${VERBOSE:-0}

EXCLUDE_REGEX=${EXCLUDE_REGEX:-$EXCLUDE_REGEX_DEFAULT}
CTAGS_OPTIONS=${CTAGS_OPTIONS:-$CTAGS_DEFAULT_OPTIONS}

TIME_COMMAND="date +%s"
PREVIOUS_RUN_TIME=`$TIME_COMMAND`

log_if_verbose "EXCLUDE_REGEX: $EXCLUDE_REGEX\n"
log_if_verbose "CTAGS_OPTIONS: $CTAGS_OPTIONS\n"
log_if_verbose "Watching: $WATCHED_DIR, PID: $$\n"

watch_command(){
  if [ "$OSTYPE" = "linux-gnu" ]; then
    inotifywait -q --excludei="$EXCLUDE_REGEX"\
      -m -r -e modify -e move -e create -e delete $WATCHED_DIR
  else
    fsw --recursive --latency 0.1 --extended --exclude="$EXCLUDE_REGEX" $WATCHED_DIR
  fi
}

watch_command | while read line; do

  NOW=`$TIME_COMMAND`

  if [ "$NOW" -gt "$PREVIOUS_RUN_TIME" ]; then
    ctags -f $WATCHED_DIR/tags $CTAGS_OPTIONS $WATCHED_DIR/

    log_if_verbose "\nupdated because of $line on `date`\n"

    PREVIOUS_RUN_TIME=`$TIME_COMMAND`
  else
    log_if_verbose '.'
    log_if_verbose "\nignored $line on `date`\n"
  fi

done
